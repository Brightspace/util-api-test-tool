import * as cdk from '@aws-cdk/core';
import ecr = require("@aws-cdk/aws-ecr");
import ecs = require("@aws-cdk/aws-ecs");
import ecs_patterns = require("@aws-cdk/aws-ecs-patterns");
import ec2 = require("@aws-cdk/aws-ec2");
import * as elbv2 from '@aws-cdk/aws-elasticloadbalancingv2';
import image_asset = require('@aws-cdk/aws-ecr-assets');
import * as path from 'path';


export class InfrastructureStack extends cdk.Stack {

  constructor(scope: cdk.Construct, id: string, props?: cdk.StackProps) {
    super(scope, id, props);

    // ECR repository
    const repository = new ecr.Repository(this, "api-test-tool-app", {
      repositoryName: "api-test-tool-app"
    });

    const asset = new image_asset.DockerImageAsset(this, 'ApiTestToolImage', {
      directory: path.join(__dirname, '/../../src/')
    });

    const taskDefinition = new ecs.FargateTaskDefinition(this, "TaskDef", {
      memoryLimitMiB: 1024,
      cpu: 512
    });
    
    taskDefinition.addContainer("my-other-container", {
      image: ecs.ContainerImage.f.fromEcrRepository(asset.repository, asset.imageUri.split(":").pop())
    });

    /*
    // VPC
    const vpc = new ec2.Vpc(this, "ApiTestToolVpc", { 
      cidr: "10.0.0.0/16", 
      maxAzs : 1 
    });

    // ESC Cluster for fargate
    const cluster = new ecs.Cluster( this, "ApiTestToolFargateCluster", { vpc : vpc });

    const taskDefinition = new ecs.Ec2TaskDefinition( this, "ApiTestToolTaskDefinition");
    
    const container = taskDefinition.addContainer( "web", {
      image: ecs.ContainerImage.fromRegistry("api-test-tool-app"),
      memoryLimitMiB: 256
    });

    // Fargate Service
    const ecsFargateService = new ecs_patterns.ApplicationLoadBalancedFargateService( scope, "ApiTestToolApplicationLoadBalancedFargateService", {
      cluster,
      desiredCount : 2,
      publicLoadBalancer : true,
      taskDefinition: taskDefinition
    });


   
    // OR

    //////////////////////////////////////////////////////
    // Below this line explicitly creates the environment
    //////////////////////////////////////////////////////

    

    

    container.addPortMappings ( {
      containerPort: 80,
      hostPort: 8080,  //???????????????????????????????
      protocol: ecs.Protocol.TCP
    });

    const service = new ecs.Ec2Service( this, "ApiTestToolService", {
      cluster,
      taskDefinition
    });

    // Create the load balancer in a VPC. 'internetFacing' is 'false'
    // by default, which creates an internal load balancer.
    const LB = new elbv2.ApplicationLoadBalancer(this, 'LB', {
      vpc,
      internetFacing: true
    });

    const listener = LB.addListener("ApiTestToolPublicListener", {
      port: 80,
      open: true
    });

    listener.addTargets( "ECS", {
      port: 80,
      targets: [service],
      healthCheck: {
        interval: cdk.Duration.seconds(60),
        path: "/health",                              ///////////////////////// Change this.
        timeout: cdk.Duration.seconds(5)
      }
    });

    new cdk.CfnOutput( scope, "ApiTestToolLoadBalanceDNS", {
      value: LB.loadBalancerDnsName
    });

//////////////////////////
// Not needed for this app
    */
  }
}
